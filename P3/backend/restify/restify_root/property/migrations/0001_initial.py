# Generated by Django 4.1.6 on 2023-04-18 19:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Amenity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amenity_name", models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name="PropData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(help_text="perperty title", max_length=256)),
                (
                    "description",
                    models.TextField(
                        max_length=3000, verbose_name="perperty description"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("House", "house"),
                            ("Apartment", "apartment"),
                            ("Cabin", "cabin"),
                            ("Cave", "cave"),
                            ("Hotel", "hotel"),
                        ],
                        max_length=32,
                        verbose_name="currently 5 types: 'house', 'apartment','cabin','cave','hotel",
                    ),
                ),
                (
                    "amenity_id",
                    models.CharField(
                        max_length=289,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_amenity_id",
                                message="amenity id must be positive integers seperated by comma only",
                                regex="^([0-9]+,)*[0-9]+$",
                            )
                        ],
                        verbose_name="string of ammenty id, split by comma. i.e '11,2,93,4,' , '', '2',",
                    ),
                ),
                ("location", models.CharField(max_length=1024, verbose_name="address")),
                (
                    "structure",
                    models.CharField(
                        max_length=40,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_structure",
                                message="struct must be 3 non-negative integers seperated by 1 comma only, indicationg total beds, rooms, washrooms",
                                regex="^[0-9]+,[0-9]+,[0-9]+$",
                            )
                        ],
                        verbose_name="string with 3 numbers seperated by comma, indicationg total [beds, rooms, washrooms] of the property. i.e [1,2,3] means the property has 1 bed, 2 rooms, and 3 toilets",
                    ),
                ),
                (
                    "rent_type",
                    models.CharField(
                        choices=[
                            ("Entire Place", "entire_place"),
                            ("Private Room", "private_room"),
                            ("Shared Room", "shared_room"),
                            ("Entire Floor", "entire_floor"),
                        ],
                        max_length=32,
                        verbose_name="currently 4 types: entire_place, private_room,shared_room, entire_floor",
                    ),
                ),
                (
                    "avaliable_structure",
                    models.CharField(
                        max_length=40,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_avaliable_structure",
                                message="struct must be 3 non-negative integers seperated by 1 comma only, indicationg avaliable beds, rooms, washrooms",
                                regex="^[0-9]+,[0-9]+,[0-9]+$",
                            )
                        ],
                        verbose_name="string with 3 numbers seperated by comma, indicationg avaliable [beds, rooms, washrooms] of the property. i.e [1,2,3] means the property has 1 bed, 2 rooms, and 3 toilets avaliable",
                    ),
                ),
                (
                    "price",
                    models.PositiveIntegerField(
                        verbose_name="price of the hourse per day"
                    ),
                ),
                (
                    "total_guests",
                    models.PositiveSmallIntegerField(
                        verbose_name="number of guests this property can support"
                    ),
                ),
                (
                    "avaliable_guests",
                    models.PositiveSmallIntegerField(
                        verbose_name="number of guests this property can add"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PropQuery",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "str_q",
                    models.CharField(
                        default=None,
                        help_text="string you want to find",
                        max_length=256,
                        null=True,
                    ),
                ),
                (
                    "amenity_id",
                    models.CharField(
                        default=None,
                        max_length=289,
                        null=True,
                        verbose_name="string of ammenty id, split by comma. i.e '11,2,93,4,' , '', '2',",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        default=None,
                        max_length=1024,
                        null=True,
                        verbose_name="address of property you want",
                    ),
                ),
                ("distance", models.PositiveSmallIntegerField(default=None, null=True)),
                ("start_date", models.DateField(default=None, null=True)),
                ("end_date", models.DateField(default=None, null=True)),
                ("num_beds", models.PositiveSmallIntegerField(default=None, null=True)),
                (
                    "num_rooms",
                    models.PositiveSmallIntegerField(default=None, null=True),
                ),
                (
                    "num_washrooms",
                    models.PositiveSmallIntegerField(default=None, null=True),
                ),
                (
                    "rent_type",
                    models.CharField(
                        choices=[
                            ("Entire Place", "entire_place"),
                            ("Private Room", "private_room"),
                            ("Shared Room", "shared_room"),
                            ("Entire Floor", "entire_floor"),
                        ],
                        default=None,
                        max_length=32,
                        null=True,
                        verbose_name="currently 4 types: entire_place, private_room,shared_room, entire_floor",
                    ),
                ),
                (
                    "prop_type",
                    models.CharField(
                        choices=[
                            ("House", "house"),
                            ("Apartment", "apartment"),
                            ("Cabin", "cabin"),
                            ("Cave", "cave"),
                            ("Hotel", "hotel"),
                        ],
                        default=None,
                        max_length=32,
                        null=True,
                        verbose_name="currently 5 types: 'house', 'apartment','cabin','cave','hotel",
                    ),
                ),
                (
                    "start_price",
                    models.PositiveIntegerField(
                        default=None, null=True, verbose_name="min price you want"
                    ),
                ),
                (
                    "max_price",
                    models.PositiveIntegerField(
                        default=None, null=True, verbose_name="max price"
                    ),
                ),
                (
                    "guest",
                    models.PositiveSmallIntegerField(
                        default=None, null=True, verbose_name="guests can fit"
                    ),
                ),
                (
                    "sort_by",
                    models.CharField(
                        choices=[
                            ("price", "price"),
                            ("avaliable_guests", "number of guests avaliable"),
                        ],
                        default=None,
                        max_length=32,
                        null=True,
                        verbose_name="currently 2 sory type: price, number of beds",
                    ),
                ),
            ],
        ),
        
        # migrations.CreateModel(
        #     name="PropImage",
        #     fields=[
        #         (
        #             "id",
        #             models.BigAutoField(
        #                 auto_created=True,
        #                 primary_key=True,
        #                 serialize=False,
        #                 verbose_name="ID",
        #             ),
        #         ),
        #         ("upload", models.ImageField(upload_to="user_directory_path")),
        #         (
        #             "owner",
        #             models.ForeignKey(
        #                 on_delete=django.db.models.deletion.CASCADE,
        #                 to=settings.AUTH_USER_MODEL,
        #             ),
        #         ),
        #         (
        #             "pid",
        #             models.ForeignKey(
        #                 on_delete=django.db.models.deletion.CASCADE,
        #                 to="property.propdata",
        #             ),
        #         ),
        #     ],
        # ),
        
        migrations.CreateModel(
            name="ActiveProp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                (
                    "price",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1000000),
                        ]
                    ),
                ),
                (
                    "pid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="property.propdata",
                    ),
                ),
            ],
            options={"unique_together": {("pid", "date")},},
        ),
    ]
